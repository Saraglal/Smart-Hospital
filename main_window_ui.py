#   -*    - coding: utf   -8     -*  -

# Form implementation generated from reading ui file 'ui/main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox,QApplication,QMainWindow,QWidget,QDialog,QVBoxLayout,QFileDialog
from new_case_window_ui import *
from open_case_window import *
import sys

class Ui_MainWindow(object):
    
    def __init__(self):
        super().__init__()
        
        


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(680, 480)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("ui/resources/doctor.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        #######################################
        self.new_case = QtWidgets.QPushButton(self.centralwidget)
        self.new_case.setGeometry(QtCore.QRect(250, 120, 131, 61))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("ui/resources/icons8-plus-+-16.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.new_case.setIcon(icon1)
        self.new_case.setIconSize(QtCore.QSize(32, 32))
        self.new_case.setObjectName("new_case")
        self.new_case.clicked.connect(self.new_case_func)
        #######################################
        self.open_case = QtWidgets.QPushButton(self.centralwidget)
        self.open_case.setGeometry(QtCore.QRect(490, 120, 151, 61))
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("ui/resources/icons8-directory-16.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.open_case.setIcon(icon2)
        self.open_case.setIconSize(QtCore.QSize(100, 100))
        self.open_case.setObjectName("open_case")
        self.open_case.clicked.connect(self.open_case_func)
        #######################################
        self.history = QtWidgets.QScrollArea(self.centralwidget)
        self.history.setGeometry(QtCore.QRect(  -1,   -1, 211, 431))
        self.history.setWidgetResizable(True)
        self.history.setObjectName("history")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 209, 429))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.verticalScrollBar = QtWidgets.QScrollBar(self.scrollAreaWidgetContents)
        self.verticalScrollBar.setGeometry(QtCore.QRect(200, 40, 8, 371))
        self.verticalScrollBar.setOrientation(QtCore.Qt.Vertical)
        self.verticalScrollBar.setObjectName("verticalScrollBar")
        self.horizontalScrollBar = QtWidgets.QScrollBar(self.scrollAreaWidgetContents)
        self.horizontalScrollBar.setGeometry(QtCore.QRect(0, 410, 181, 8))
        self.horizontalScrollBar.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalScrollBar.setObjectName("horizontalScrollBar")
        self.history_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.history_label.setGeometry(QtCore.QRect(27, 10, 70, 19))
        self.history_label.setObjectName("history_label")
        self.image = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.image.setGeometry(QtCore.QRect(10, 11, 15, 15))
        self.image.setText("")
        self.image.setPixmap(QtGui.QPixmap("ui/resources/icons8-history-48.png"))
        self.image.setScaledContents(True)
        self.image.setObjectName("image")
        self.open_case.setIconSize(QtCore.QSize(100, 100))
        self.line = QtWidgets.QFrame(self.scrollAreaWidgetContents)
        self.line.setGeometry(QtCore.QRect(10, 30, 171, 16))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.history.setWidget(self.scrollAreaWidgetContents)
        #######################################
        self.description = QtWidgets.QTextBrowser(self.centralwidget)
        self.description.setGeometry(QtCore.QRect(220, 280, 451, 141))
        self.description.setObjectName("description")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 680, 24))
        self.menubar.setObjectName("menubar")
        self.menu_file = QtWidgets.QMenu(self.menubar)
        self.menu_file.setObjectName("menu_file")
        self.menu_Help = QtWidgets.QMenu(self.menubar)
        self.menu_Help.setObjectName("menu_Help")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        #######################################
        self.actionopen = QtWidgets.QAction(MainWindow)
        self.actionopen.setIcon(icon2)
        self.actionopen.setObjectName("actionopen")
        self.actionNew = QtWidgets.QAction(MainWindow)
        self.actionNew.setIcon(icon1)
        self.actionNew.setObjectName("actionNew")
        #######################################
        self.actionexit = QtWidgets.QAction(MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("ui/resources/icons8-close-30.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionexit.setIcon(icon3)
        self.actionexit.setObjectName("actionexit")
        #######################################
        self.actionsave = QtWidgets.QAction(MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("ui/resources/icons8-save-30.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionsave.setIcon(icon4)
        self.actionsave.setObjectName("actionsave")
        self.actionOpen_all = QtWidgets.QAction(MainWindow)
        self.actionOpen_all.setObjectName("actionOpen_all")
        #######################################
        self.actionAbout = QtWidgets.QAction(MainWindow)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("ui/resources/icons8-about-30.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAbout.setIcon(icon5)
        self.actionAbout.setObjectName("actionAbout")
        #######################################
        self.menu_file.addAction(self.actionNew)
        self.menu_file.addSeparator()
        self.menu_file.addAction(self.actionopen)
        self.menu_file.addSeparator()
        self.menu_file.addSeparator()
        self.menu_file.addAction(self.actionexit)
        self.menu_file.addSeparator()
        self.menu_Help.addAction(self.actionAbout)
        self.menubar.addAction(self.menu_file.menuAction())
        self.menubar.addAction(self.menu_Help.menuAction())
        self.retranslateUi(MainWindow)
        #######################################
        self.actionAbout.triggered.connect(self.about)
        self.actionexit.triggered.connect(self.close)
        self.actionopen.triggered.connect(self.open_case_func)
        self.actionNew.triggered.connect(self.new_case_func)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    def closeEvent(self, event):
        reply = QMessageBox.question(self, 'Quit', 'Are you sure you want to quit?',
        QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            event.accept()
        else:
            event.ignore()


    def close(self,event):
        self.quit =QWidget()
        reply=QMessageBox.question(self.quit, 'Quit', 'Are you sure you want to quit?',
        QMessageBox.Yes |QMessageBox.No)
        if reply == QMessageBox.Yes:
            sys.exit()
        else:
            self.quit.close()




        

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Home"))
        self.new_case.setText(_translate("MainWindow", "New case"))
        self.open_case.setText(_translate("MainWindow", "Open Case"))
        self.history_label.setText(_translate("MainWindow", "History:"))
        self.description.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \" -//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC    -html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white  -space: pre   -wrap; }\n"
"</style></head><body style=\" font -family:\'Cantarell\'; font  -size:11pt; font  -weight:400; font -style:normal;\">\n"
"<p style=\" margin -top:0px; margin -bottom:0px; margin  -left:0px; margin -right:0px;  -qt  -block    -indent:0; text -indent:0px;\"><span style=\" font   -size:12pt; font   -weight:600; text  -decoration: underline;\">Description</span><span style=\" font   -size:12pt; font   -weight:600;\">:</span></p>\n"
"<p style=\" margin -top:0px; margin -bottom:0px; margin  -left:0px; margin -right:0px;  -qt  -block    -indent:0; text -indent:0px;\">Due to the high incidence of skin tumors, the development of computer -aided   -diagnosis methods will become a very powerful diagnostic tool for dermatologists. Early detection of skin cancers, including melanoma and non -melanoma skin cancers is crucial.</p></body></html>"))
        self.menu_file.setTitle(_translate("MainWindow", "&File"))
        self.menu_Help.setTitle(_translate("MainWindow", "&Help"))
        self.actionopen.setText(_translate("MainWindow", "&Open "))
        self.actionopen.setToolTip(_translate("MainWindow", "Open an existed case"))
        self.actionopen.setShortcut(_translate("MainWindow", "Alt+O"))
        self.actionNew.setText(_translate("MainWindow", "&New"))
        self.actionNew.setToolTip(_translate("MainWindow", "New case"))
        self.actionNew.setShortcut(_translate("MainWindow", "Alt+N"))
        self.actionexit.setText(_translate("MainWindow", "&Exit "))
        self.actionexit.setToolTip(_translate("MainWindow", "Exit"))
        self.actionexit.setShortcut(_translate("MainWindow", "Alt+E"))
        self.actionsave.setText(_translate("MainWindow", "&Save"))
        self.actionsave.setToolTip(_translate("MainWindow", "Save"))
        self.actionsave.setShortcut(_translate("MainWindow", "Alt+S"))
        self.actionAbout.setText(_translate("MainWindow", "&About "))
        self.actionAbout.setShortcut(_translate("MainWindow", "Alt+A"))

    def about(self):
        self.msg=QWidget()
        about=QMessageBox.about(self.msg,
            "About Smart hospital project",
            "<p>A sample app for skin diagnosis</p>  <p> Made by:</p>  <p>  - Aly Khaled Aly Abd El-aal </p>  <p> - Adel Ma'mon Elwan </p>  <p>    - Sara Galal </p>  <p> Supervised by: </p>  <p>  Tanta University</p>",
            )
        if about == QMessageBox.Ok:
            self.msg.close()

    def open_case_func(self):
        
        filename=QFileDialog.getOpenFileName()
        path=filename[0]
        path=str(path)
        file = open(path, "r")
        info=[item.replace("\n","") for item in file.readlines()]
        self.w = QWidget()
        ui=open_case_window()
        ui.setupUi(self.w,info)
        self.w.show()
        # print(path)
        # model=load_model('chest_xray.h5') 
        # img_file=image.load_img(path,target_size=(224,224))
        # x=image.img_to_array(img_file)
        # x=np.expand_dims(x, axis=0)
        # img_data=preprocess_input(x)
        # classes=model.predict(img_data)
        global result
        result="classes"


    def new_case_func(self):
        self.w = QWidget()
        ui=new_case_Ui()
        ui.setupUi(self.w)
        self.w.show()






if __name__ == "__main__":
    
    app = QApplication(sys.argv)
    MainWindow = QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())